import time

def decorator_1(func):
    def wrapper(*args, **kwargs):
        st_time = time.time()
        result = func(*args, **kwargs)
        e_time = time.time()
        ex_time = e_time - st_time
        print(f"Function '{func.__name__}' executed in {execution_time:.6f} seconds")
        return result
    return wrapper

def typeBasedTransformer(**kwargs):
    result = {}
    for key, value in kwargs.items():
        if isinstance(value, (int, float)):
            result[key] = value ** 2
        elif isinstance(value, str):
            result[key] = value[::-1]
        elif isinstance(value, bool):
            result[key] = not value
        elif isinstance(value, (list, tuple)):
            result[key] = value[::-1]
        elif isinstance(value, dict):
            if len(set(value.values())) == len(value.values()):
                result[key] = {v: k for k, v in value.items()}
            else:
                result[key] = value
        else:
            result[key] = value
    return result
